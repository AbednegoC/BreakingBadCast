{"version":3,"sources":["img/logo.png","img/spinner.gif","components/UI/Header.js","components/characters/CharacterItems.js","components/UI/Spinner.js","components/characters/CharacterGrid.js","components/UI/Search.js","components/UI/ShowInfo.js","App.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","CharacterItems","character","img","name","portrayed","nickname","status","occupation","Spinner","spinner","style","width","margin","display","CharacterGrid","characters","isLoading","map","key","char_id","Search","getQuery","useState","text","setText","type","placeholder","value","onChange","e","q","target","autoFocus","ShowInfo","App","setCharacters","setIsLoading","query","setQuery","useEffect","a","axios","result","data","fetchItems","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,sMCa5BC,EATA,WACX,OAEI,4BAAQC,UAAU,UACd,yBAAKC,IAAKC,IAAMC,IAAI,OCoBjBC,EAzBQ,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACtB,OACI,yBAAKL,UAAU,QACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,cACX,yBAAKC,IAAKI,EAAUC,IAAKH,IAAI,MAEjC,yBAAKH,UAAU,aACX,4BAAKK,EAAUE,MACf,4BACI,4BAAI,gDAA8BF,EAAUG,WAC5C,4BAAI,8CAA4BH,EAAUI,UAC1C,4BAAI,4CAA0BJ,EAAUK,QACxC,4BAAI,gDAA8BL,EAAUM,iB,iBCNrDC,EAPC,WACZ,OAEI,yBAAKX,IAAKY,IAASC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQC,QAAS,SAAWd,IAAI,aCY5Ee,EAbO,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,WACrB,OADiD,EAAhBC,UAE7B,kBAAC,EAAD,MAEI,6BAASpB,UAAU,SACdmB,EAAWE,KAAI,SAAChB,GAAD,OACZ,kBAAC,EAAD,CAAgBiB,IAAKjB,EAAUkB,QAASlB,UAAWA,SC4BxDmB,EApCA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAGLC,mBAAS,IAHJ,mBAGtBC,EAHsB,KAGhBC,EAHgB,KAW7B,OAEI,6BAAS5B,UAAU,UACf,8BAGI,2BACI6B,KAAK,OACL7B,UAAU,eACV8B,YAAY,wBACZC,MAAOJ,EACPK,SAAU,SAACC,GAAD,OAhBRC,EAgBwBD,EAAEE,OAAOJ,MAf/CH,EAAQM,QACRT,EAASS,GAFI,IAACA,GAiBFE,WAAS,KAIlB,6BAASpC,UAAU,WACf,4ECdAqC,EAdE,WACf,OACE,6BAASrC,UAAU,YACjB,gdC2CSsC,G,MAtCH,WAAM,MAGoBZ,mBAAS,IAH7B,mBAGTP,EAHS,KAGGoB,EAHH,OAMkBb,oBAAS,GAN3B,mBAMTN,EANS,KAMEoB,EANF,OASUd,mBAAS,IATnB,mBASTe,EATS,KASFC,EATE,KA4BhB,OAhBAC,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,sEAGIC,IAAM,sDAAD,OAAuDJ,IAHhE,OAGXK,EAHW,OAMjBP,EAAcO,EAAOC,MAErBP,GAAa,GARI,2CAAH,qDAWhBQ,KAEC,CAACP,IAGF,yBAAKzC,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQyB,SAAU,SAACS,GAAD,OAAOQ,EAASR,MAClC,kBAAC,EAAD,CAAed,UAAWA,EAAWD,WAAYA,IACjD,kBAAC,EAAD,SCxCN8B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.34c5933e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3795f66d.png\";","module.exports = __webpack_public_path__ + \"static/media/spinner.235b9b3e.gif\";","// A functional component that simply places our logo in the 'Header' component:\nimport React from 'react'\nimport logo from '../../img/logo.png'\n\nconst Header = () => {\n    return (\n        // Simple JSX that renders our logo img:\n        <header className=\"center\">\n            <img src={logo} alt='' />\n        </header>\n    )\n}\n\nexport default Header\n","import React from 'react'\n\n// Passing in a character as a prop\nconst CharacterItems = ({ character }) => {\n    return (\n        <div className='card'>\n            <div className='card-inner'>\n                <div className='card-front'>\n                    <img src={character.img} alt='' />\n                </div>\n                <div className='card-back'>\n                    <h1>{character.name}</h1>\n                    <ul>\n                        <li><strong>Actor Name: </strong>{character.portrayed}</li>\n                        <li><strong>Nickname: </strong>{character.nickname}</li>\n                        <li><strong>Status: </strong>{character.status}</li>\n                        <li><strong>Occupation: </strong>{character.occupation}</li>\n                        {/* <li><strong>Cuase of Death: </strong>{character.cause}</li> */}\n\n                        \n                    </ul>\n                </div>\n            </div>\n        </div>\n       \n    )\n}\n\nexport default CharacterItems\n","import React from 'react'\nimport spinner from '../../img/spinner.gif'\n\nconst Spinner = () => {\n    return (\n        // spinner props\n        <img src={spinner} style={{ width: '50px', margin: 'auto', display: 'block' }} alt='Loading' />\n    )\n}\n\nexport default Spinner\n","import React from 'react'\nimport CharacterItems from './CharacterItems'\nimport Spinner from '../UI/Spinner'\n\n// Passing in our characters and isLoading as props\nconst CharacterGrid = ({ characters, isLoading }) => {\n    return isLoading ? (\n        <Spinner />\n    ) : (\n            <section className='cards'>\n                {characters.map((character) => (\n                    <CharacterItems key={character.char_id} character={character}></CharacterItems>\n                ))}\n            </section>\n            \n        )\n}\n\nexport default CharacterGrid \n","// Using 'useState' since our 'Search' component uses a form and every input in the form usually has its own state.\nimport React, { useState } from 'react'\n\nconst Search = ({ getQuery }) => {\n\n    // Create our local piece of state for this component:\n    const [text, setText] = useState('')\n\n    \n    const onChange = (q) => {\n        setText(q)\n        getQuery(q)\n    }\n\n    return (\n        // Create simple form:\n        <section className='search'>\n            <form>\n                {/* 'input' is a control component, which is why we have an 'onChange' event in the form */}\n                {/* onChange will trigger whenever we type/delete something in the form */}\n                <input\n                    type='text'\n                    className='form-control'\n                    placeholder='Search a character...'\n                    value={text}\n                    onChange={(e) => onChange(e.target.value)}\n                    autoFocus\n                />\n            </form>\n\n           <section className='warning'>\n               <h4>* Warning: this site contains spoilers! *</h4>\n           </section>\n\n        </section>\n       \n    )\n}\n\nexport default Search\n","// Note: 'rce' tab generates quick components if the extension is installed.\nimport React from \"react\";\n\nconst ShowInfo = () => {\n  return (\n    <section className=\"showInfo\">\n      <p>\n        Breaking Bad is a popular American neo-Western crime drama television\n        series created and produced by Vince Gilligan. This show aired on AMC from January 20, 2008\n        to September 29, 2013, consisting of five season with a total of 62 episodes. Breaking Bad is set in\n        Albuquerque, New Mexico and tells the incredibly transformative story of Walter White who goes from innocent \n        high school chemistry teacher to the infamous 'Heisenberg'.\n      </p>\n    </section>\n  );\n};\n\nexport default ShowInfo;\n","// Using react hooks to create functional components: 1) useState is used within our functional components. 2) useEffect is used to trigger when a component loads to make a HTTP req to get our data (i.e: name, img, etc.)\n\nimport React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Header from './components/UI/Header'\nimport CharacterGrid from './components/characters/CharacterGrid'\nimport Search from './components/UI/Search'\nimport ShowInfo from './components/UI/ShowInfo'\nimport './App.css'\n\n\nconst App = () => {\n\n  // UseState [Characters] --> Our Breaking Bad characters from API. setChars --> funct () we use to manipulate our state.\n  const [characters, setCharacters] = useState([])\n\n  // Represents/Checks whether our API data is loading & has loaded. \n  const [isLoading, setIsLoading] = useState(true)\n\n  // Represents whatever our current 'Search' query is (aka whatever we type in the Search form).\n  const [query, setQuery] = useState('')\n\n  // Make a request using axios:\n  useEffect(() => {\n    const fetchItems = async () => {\n\n      // What we receive from our axios request:\n      const result = await axios(`https://www.breakingbadapi.com/api/characters?name=${query}`)\n\n      // Set result.data to our 'characters' state (i.e: setCharacters)\n      setCharacters(result.data)\n      // SetIsLoading to 'false' now that we have recieved our API data & it is loaded.\n      setIsLoading(false)\n    }\n    // Actually get our request data:\n    fetchItems()\n\n  }, [query]) // [query] is a dependency that constantly updates our Search query w/ the help of our getQuery() + props\n\n  return (\n    <div className='container'>\n      <Header />\n      <Search getQuery={(q) => setQuery(q)} />\n      <CharacterGrid isLoading={isLoading} characters={characters} /> \n      <ShowInfo />\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}